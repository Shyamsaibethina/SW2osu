import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class TagCloudGeneratorJava {

    /**
     * String for the list of possible separators (except for ").
     */
    private static final String SEPARATORSTRING = ". ,:;'{][}|/><?!`~1234567890"
            + "@#$%^&*()-_=+\" ";

    /**
     * Returns a negative integer, zero, or a positive integer as the first
     * argument is less than, equal to, or greater than the second.
     *
     */
    private static class IntegerLT implements Comparator<String> {
        //instance
        private Map<String, Integer> compareMap;

        public IntegerLT(Map<String, Integer> compareMap) {
            this.compareMap = compareMap;
        }

        @Override
        public int compare(String str1, String str2) {
            int firstInt = this.compareMap.get(str1);
            int secondInt = this.compareMap.get(str2);
            if (secondInt > firstInt) {
                return 1;
            } else if (firstInt > secondInt) {
                return -1;
            } else {
                return str2.compareTo(str1);
            }
        }
    }

    public static Map<String, Integer> readFile(BufferedReader input)
            throws IOException {
        assert input.ready() : "The input must be open";

        Map<String, Integer> wordMap = new HashMap<String, Integer>();

        String toBeAdded = "";
        //use a try here because there may be an issue reading the line
        try {
            String line = input.readLine();

            //if the line is null that means that file has reached its end.
            while (line != null) {
                line = line.toLowerCase();
                //iterate through each character
                for (int i = 0; i < line.length(); i++) {

                    //if the character is not a separator add it to String toBeAdded
                    if (!SEPARATORSTRING
                            .contains(Character.toString(line.charAt(i)))) {

                        toBeAdded += Character.toString(line.charAt(i));
                    } else if (SEPARATORSTRING
                            .contains(Character.toString(line.charAt(i)))) {

                        //if wordMap has the word increment its corresponding value
                        if (toBeAdded != "" && wordMap.containsKey(toBeAdded)) {
                            int value = wordMap.get(toBeAdded);
                            value++;
                            wordMap.put(toBeAdded, value);
                            //if the wordMap doesn't have it add it with value 1
                        } else if (toBeAdded != ""
                                && !wordMap.containsKey(toBeAdded)) {
                            wordMap.put(toBeAdded, 1);
                        }
                        //reset toBeAdded to add more words
                        toBeAdded = "";
                    }
                }
                line = input.readLine();
            }

            //If a word proceeds with the end of file then we need to check
            if (toBeAdded != "" && wordMap.containsKey(toBeAdded)) {
                int value = wordMap.get(toBeAdded);
                value++;
                wordMap.put(toBeAdded, value);
            } else if (toBeAdded != "" && !wordMap.containsKey(toBeAdded)) {
                wordMap.put(toBeAdded, 1);
            }

        } catch (IOException a) {
            System.err.print("Error opening reading from the file");
        }

        return wordMap;

    }

    public static TreeMap<String, Integer> sortMap(Map<String, Integer> map) {
        IntegerLT c = new IntegerLT(map);

        TreeMap<String, Integer> countSorted = new TreeMap<>(c);

        Set<Map.Entry<String, Integer>> pairSet = map.entrySet();

        while(pairSet.size()>0) {
            pair
        }

        return countSorted;

    }

    public static void main(String[] args) throws IOException {
        BufferedReader input = new BufferedReader(
                new FileReader("data/test.txt"));

        Map<String, Integer> wordCount = readFile(input);

        System.out.println(wordCount.toString());

        TreeMap<String, Integer> wordSorted = sortMap(wordCount);

        System.out.println(wordSorted.toString());
    }
}
