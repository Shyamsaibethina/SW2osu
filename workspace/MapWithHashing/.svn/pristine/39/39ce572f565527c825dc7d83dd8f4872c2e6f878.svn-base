import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.map.Map;
import components.map.Map.Pair;

/**
 * JUnit test fixture for {@code Map<String, String>}'s constructor and kernel
 * methods.
 *
 * @author Shyam Sai Bethina and Yihone Chu
 *
 */
public abstract class MapTest {

    /**
     * Invokes the appropriate {@code Map} constructor for the implementation
     * under test and returns the result.
     *
     * @return the new map
     * @ensures constructorTest = {}
     */
    protected abstract Map<String, String> constructorTest();

    /**
     * Invokes the appropriate {@code Map} constructor for the reference
     * implementation and returns the result.
     *
     * @return the new map
     * @ensures constructorRef = {}
     */
    protected abstract Map<String, String> constructorRef();

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the implementation
     * under test type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsTest = [pairs in args]
     */
    private Map<String, String> createFromArgsTest(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorTest();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the reference
     * implementation type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsRef = [pairs in args]
     */
    private Map<String, String> createFromArgsRef(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorRef();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    // TODO - add test cases for constructor, add, remove, removeAny, value,
    // hasKey, and size

    /**
     * Test no argument constructor.
     */
    @Test
    public void testConstuctor() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        assertEquals(expected, tested);
    }

    /**
     * Test add method with an edge case.
     */
    @Test
    public void testAdd1() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        this.constructorTest().add("", "");

        this.constructorRef().add("", "");

        assertEquals(expected, tested);
    }

    /**
     * Test add method with a routine case.
     */
    @Test
    public void testAdd2() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        this.constructorTest().add("hello", "there");

        this.constructorRef().add("hello", "there");

        assertEquals(expected, tested);
    }

    /**
     * Test add method with a routine case.
     */
    @Test
    public void testAdd3() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        this.constructorTest().add("hello", "there");

        this.constructorRef().add("hello", "there");

        assertEquals(expected, tested);
    }

    /**
     * Test add method with a routine case.
     */
    @Test
    public void testAdd4() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        this.constructorTest().add("hello", "there");
        this.constructorTest().add("my", "name");

        this.constructorRef().add("hello", "there");
        this.constructorRef().add("my", "name");

        assertEquals(expected, tested);
    }

    /**
     * Test remove method with a routine case.
     */
    @Test
    public void testRemove() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        tested.add("hello", "there");
        tested.add("my", "name");

        Pair<String, String> testReturn = tested.remove("my");

        expected.add("hello", "there");
        expected.add("my", "name");
        Pair<String, String> expectedReturn = expected.remove("my");

        assertEquals(expected, tested);
    }

    /**
     * Test remove method with a edge case.
     */
    @Test
    public void testRemove2() {
        Map<String, String> tested = this.constructorTest();
        Map<String, String> expected = this.constructorRef();

        tested.add("hello", "there");

        Pair<String, String> testReturn = tested.remove("hello");

        tested.add("hello", "there");

        Pair<String, String> expectedReturn = expected.remove("hello");

        assertEquals(expected, tested);
    }

    @Test
    public void testHasKey() {
        Map<String, String> tested = this.constructorTest();
        tested.add("", "there");

        Map<String, String> expectd = this.constructorRef();

        boolean answer = tested.hasKey("");

        assertEquals(true, answer);
    }

}
